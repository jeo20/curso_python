https://www.youtube.com/watch?v=_y9qQZXE24A

00:00:00 | Introducción

00:02:05 | 01 - ¿Qué es un backend?
        El backend, también conocido como "el lado del servidor", es la parte de una aplicación web o sitio web 
        que no es visible para el usuario final, pero que es esencial para su funcionamiento. 
        El backend se encarga de tareas fundamentales como: Administrar bases de datos, 
        Ejecutar la lógica empresarial, Gestionar la seguridad, Comunicarse con servidores
        y Procesar datos.

00:13:54 | 02 - API y FastAPI
        API es la abreviatura en inglés de "Application Programming Interface" o "Interfaz de Programación de Aplicaciones".
        Es un conjunto de funciones y protocolos que permiten que las aplicaciones de software se comuniquen entre sí 
        para intercambiar datos, características y funcionalidades.

        FastAPI es un web framework moderno y rápido (de alto rendimiento) para construir APIs con Python 
        basado en las anotaciones de tipos estándar de Python.

00:30:10 | 03 - Type Hints
        Desde Python 3.6+ tiene soporte para "type hints" opcionales.
        Estos type hints son una nueva sintaxis, desde Python 3.6+, que permite declarar el tipo de una variable.
        Usando las declaraciones de tipos para tus variables, los editores y otras herramientas pueden proveerte 
        un soporte mejor.
        Pydantic es una libreria Python para llevar a cabo validación de datos.
        https://fastapi.tiangolo.com/es/python-types/

00:43:49 | 04 - Configuración FastAPI
            pip install "fastapi[all]" (instala fastapi y uvicorn para que funcione el servidor local)
            uvicorn (servidor incorporado en FastAPI)
            uvicorn main:app --reload (iniciar el servidor en la carpeta adonde se instalo FastApi)
                El comando uvicorn main:app se refiere a:
                        main: el nombre del archivo main.py (el "módulo" de Python).
                        app: el objeto creado dentro de main.py con la línea app = FastAPI().
                        --reload: hace que el servidor se reinicie cada vez que cambia el código. Úsalo únicamente para desarrollo.
            Detener el servidor "Ctrl + C"

00:58:24 | 05 - Hola mundo
            crear un archivo main.py
            Los métodos asíncronos terminan de ejecutarse inmediatamente, devolviendo el control al subproceso que realiza la llamada sin esperar una respuesta.
            En Python, una función asíncrona es una función que se puede ejecutar sin bloquear el hilo principal del programa. Esto significa que el programa puede continuar ejecutando,
            otras tareas mientras la función asíncrona se está completando. Las funciones asíncronas son particularmente útiles para tareas que toman mucho tiempo para completarse, 
            como operaciones de red o E/S. Al usar funciones asíncronas, podemos evitar que el programa se bloquee mientras espera que estas tareas se completen, 
            lo que mejora la capacidad de respuesta y el rendimiento general de la aplicación.

            https://fastapi.tiangolo.com/es/async/

            Documentacion Swagger:
                http://127.0.0.1:8000/docs
            
            Documentacion ReDoc:
                http://127.0.0.1:8000/redoc

            
01:29:42 | 06 - Operación GET
                GET: Obtiene datos de un recurso específico.
                Postman (cliente para ejecutar peticiones a un API)
                Thunder Client (extension de VS Code, para ejecutar peticiones a un API)

01:38:45 | 07 - Peticiones HTTP
                POST: para crear datos.
                GET: para leer datos.
                PUT: para actualizar datos.
                DELETE: para borrar datos.

01:41:39 | 08 - Creación API
                CRUD (Create: POST, Read: GET, Update: PUT, Delete: DELETE)
                BaseModel
                
02:05:10 | 09 - Path y Query

                Path: Puedes declarar los "parámetros" o "variables" con la misma sintaxis que usan los format strings de Python
                se usa para parametros fijos obligatorios.
                https://fastapi.tiangolo.com/es/tutorial/path-params/

                Query: El query es el conjunto de pares de key-value que van después del ? en la URL, separados por caracteres &.
                se usa para parametros que pueden ir o no. Por ejemplo, en la URL: http://127.0.0.1:8000/items/?skip=0&limit=10
                http://127.0.0.1:8000/userquery/?id=1

                https://fastapi.tiangolo.com/es/tutorial/query-params/


02:22:09 | 10 - Operaciones POST, PUT y DELETE
                POST: para crear datos. POST http://127.0.0.1:8000/user
                PUT: para actualizar datos. PUT http://127.0.0.1:8000/user/
                DELETE: para borrar datos. DELETE http://127.0.0.1:8000/user/4


03:04:32 | 11 - HTTP status codes
                Las respuestas HTTP se agrupan en cinco clases:
                Respuestas informativas (100–199)
                Respuestas satisfactorias (200–299)
                Redirecciones (300–399)
                Errores de los clientes (400–499)
                Errores de los servidores (500–599).
                https://developer.mozilla.org/es/docs/Web/HTTP/Status

                
03:27:55 | 12 - Routers


03:46:58 | 13 - Recursos estáticos


03:54:54 | 14 - Autorización OAuth2


04:54:24 | 15 - OAuth2 JWT


05:41:20 | 16 - MongoDB


07:04:30 | 17 - MongoDB Atlas


07:35:35 | 18 - Despliegue en Deta *


07:54:44 | Próximos pasos
